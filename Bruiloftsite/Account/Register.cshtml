@{

    // Initialize general page variables
    var email = "";
    var password = "";
    var confirmPassword = "";

    // Setup validation
    Validation.RequireField("email", "You must specify an email address.");
    Validation.RequireField("password", "Password cannot be blank.");
    Validation.Add("confirmPassword",
        Validator.EqualsTo("password", "Password and confirmation password do not match."));
    Validation.Add("password",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "Password must be at least 6 characters"));

    // If this is a POST request, validate and process data
    if (IsPost)
    {
        AntiForgery.Validate();
        email = Request.Form["email"];
        password = Request.Form["password"];
        confirmPassword = Request.Form["confirmPassword"];

        // If all information is valid, create a new account
        if (Validation.IsValid())
        {
            // Insert a new user into the database
            var db = Database.Open("Database");

            // Check if user already exists
            var user = db.QuerySingle("SELECT Email FROM UserProfile WHERE LOWER(Email) = LOWER(@0)", email);
            if (user == null)
            {
                // Insert email into the profile table
                db.Execute("INSERT INTO UserProfile (Email) VALUES (@0)", email);

                // Create and associate a new entry in the membership database.
                // If successful, continue processing the request
                try
                {
                    bool requireEmailConfirmation = !WebMail.SmtpServer.IsEmpty();
                    var token = WebSecurity.CreateAccount(email, password, requireEmailConfirmation);
                    if (requireEmailConfirmation)
                    {
                        var hostUrl = Request.Url.GetComponents(UriComponents.SchemeAndServer, UriFormat.Unescaped);
                        var confirmationUrl = hostUrl + VirtualPathUtility.ToAbsolute("~/Account/Confirm?confirmationCode=" + HttpUtility.UrlEncode(token));

                        WebMail.Send(
                            to: email,
                            subject: "Please confirm your account",
                            body: "Your confirmation code is: " + token + ". Visit <a href=\"" + confirmationUrl + "\">" + confirmationUrl + "</a> to activate your account."
                        );
                    }

                    if (requireEmailConfirmation)
                    {
                        // Thank the user for registering and let them know an email is on its way
                        Response.Redirect("~/Account/Thanks");
                    }
                    else
                    {
                        // Navigate back to the homepage and exit
                        WebSecurity.Login(email, password);

                        Response.Redirect("~/");
                    }
                }
                catch (System.Web.Security.MembershipCreateUserException e)
                {
                    ModelState.AddFormError(e.Message);
                }
            }
            else
            {
                // User already exists
                ModelState.AddFormError("Email address is already in use.");
            }
        }
    }
}
<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="icon" href="~/favicon.ico">
    <title>Registreer</title>
    <!-- Bootstrap CSS -->
    <link href="~/vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <!-- CSS -->
    <link href="~/Style/login.css" rel="stylesheet">
    <!-- Required JS -->
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
</head>
<body class="text-center">

    <form class="form-signin" method="post">
        @AntiForgery.GetHtml()
        @* If one or more validation errors exist, show an error *@
        @Html.ValidationSummary("Log in was unsuccessful. Please correct the errors and try again.", excludeFieldErrors: true, htmlAttributes: null)
        <h1 class="h3 mb-3 font-weight-normal">Registreer</h1>

        <label for="email" @if (!ModelState.IsValidField("email")) { <text> class="error-label" </text> }>Email address</label>
        <input class="form-control" type="text" id="email" name="email" value="@email" @Validation.For("email") />
        @* Write any email validation errors to the page *@
        @Html.ValidationMessage("email")

        <label for="password" @if (!ModelState.IsValidField("password")) { <text> class="error-label" </text> }>Password</label>
        <input class="form-control" type="password" id="password" name="password" @Validation.For("password") />
        @* Write any password validation errors to the page *@
        @Html.ValidationMessage("password")

        <label for="confirmPassword" @if (!ModelState.IsValidField("confirmPassword")) { <text> class="error-label" </text> }>Confirm password</label>
        <input class="form-control" type="password" id="confirmPassword" name="confirmPassword" @Validation.For("confirmPassword") />
        @* Write any password validation errors to the page *@
        @Html.ValidationMessage("confirmPassword")

        <!--<button class="btn btn-lg btn-primary btn-block" type="submit" href="overview.html">Inloggen</button>-->
        <input class="btn btn-lg btn-primary btn-block" type="submit" value="Registreer" />
    </form>
</body>
</html>